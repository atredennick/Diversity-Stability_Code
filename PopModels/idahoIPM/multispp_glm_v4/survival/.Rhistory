size <- growNowYr$value[sID]
cID <- which(growNow$Coef=="rain1"|growNow$Coef=="rain2"|growNow$Coef=="temp1"|growNow$Coef=="temp2")
climEffs <- growNow$value[cID]
tID <- which(growNow$Coef=="tau")
tau <- growNow$value[tID]
mu <- intercept+size*log(N)+sum(climEffs*climate)
newN <- rlnormTrunc(1, meanlog = mu, sdlog = (1/tau), min = 0, max = 1)
return(newN)
}
# growFunc <- function(pGrowAll, pGrowYrs, N, climate, simsPerYear, doYear, sppSim){
#   growNow <- subset(pGrowAll, Spp==sppSim)
#   growNowYr <- subset(pGrowYrs, Year==doYear)
#   growNowYr <- subset(growNowYr, Spp==sppSim)
#   iID <- which(growNowYr$Coef=="intYr")
#   intercept <- growNowYr$value[iID]
#   sID <- which(growNowYr$Coef=="beta")
#   size <- growNowYr$value[sID]
#   cID <- which(growNow$Coef=="rain1"|growNow$Coef=="rain2"|growNow$Coef=="temp1"|growNow$Coef=="temp2")
#   climEffs <- growNow$value[cID]
#   tID <- which(growNow$Coef=="tau")
#   tau <- growNow$value[tID]
#   mu <- intercept+size*log(N)+sum(climEffs*climate)
#   newN <- rlnormTrunc(1, meanlog = mu, sdlog = (1/tau), min = 0, max = 1)
# #   newN <- exp(newN)
#   return(newN)
# }
####
#### Run simulations -----------------------------------------------------
####
outD <- data.frame(variable=NA, cover=NA, sim=NA, species=NA)
length(sppList)
for(i in 1:1){
sppSim <- sppList[i]
nSim <- 20
yearsN <- 50
years <- unique(allD$year)+1900
yearsID <- unique(allD$year)
Nsave <- matrix(ncol=yearsN, nrow=nSim)
sppD <- subset(allD, Species==sppSim)
Nsave[,1] <- mean(subset(sppD, year==yearsID[1])$percCover)
for(yr in 2:yearsN){
for(sim in 1:nSim){
N <- Nsave[sim,yr-1]
climYr <- sample(climD$year,1)
climate <- subset(climD, year==climYr)[,c(3,5,4,6)]
doYear <- sample(years[2:length(years)], 1)
Nout <- growFunc(pGrow=pGrowAll, pGrowYrs=pGrowYrs, N=N, climate=climate, simsPerYear=length(NforG), doYear=doYear, sppSim=sppSim)
Nsave[sim,yr] <- Nout
print(paste("Simulation", sim, "of year", yr, "for", sppSim))
}#end sim loop
}#end year loop
dN <- as.data.frame(Nsave)
colnames(dN) <- seq(1:yearsN)
nM <- melt(dN)
nM$sim <- rep(1:nSim, length(yearsN))
nM$species <- rep(sppSim, nSim*length(yearsN))
colnames(nM)[2] <-  "cover"
outD <- rbind(outD, nM)
}
####
#### Output
####
outD <- outD[2:nrow(outD),]
outP <- ddply(outD, .(species, as.numeric(variable)), summarize,
coverAvg = median(cover),
up = quantile(cover, 0.875),
down = quantile(cover, 0.125))
colnames(outP)[2] <- "year"
plot(outP$year, outP$up*100, type="l", lty=2, ylim=c(0,max(outP$up*100)))
lines(outP$year, outP$coverAvg*100, type="l", lwd=2)
lines(outP$year, outP$down*100, type="l", lty=2)
mean(outP$coverAvg)
median(outP$coverAvg)
# ggplot(outD)+
#   geom_line(aes(x=variable, y=cover*100, group=sim), alpha=0.5)
hist(outD$cover)
#Quad-Based Model simulations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
# Set working directory to location of this source file #
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
#clear everything, just to be safe
rm(list=ls(all=TRUE))
library(reshape2)
library(plyr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(EnvStats)
NumberSimsPerYear <- 10
#bring in data
allD <- read.csv("../../speciesData/quadAllCover.csv")
allD <- allD[,2:ncol(allD)] #get rid of X ID column
allD$percCover <- allD$totCover/10000
head(scale(allD$percCover, center=TRUE, scale=TRUE))
sppList <- as.character(unique(allD$Species))
#bring in climate data
climD <- read.csv("../../weather/Climate.csv")
climD[3:6] <- scale(climD[3:6], center = TRUE, scale = TRUE)
#perturb climate data
climD <- read.csv("../../weather/Climate.csv")
climScale <- scale(climD[3:6], center = TRUE, scale = TRUE)
climAvg <- apply(X = climD, MARGIN = 2, FUN = mean)
climSD <- apply(X = climD, MARGIN = 2, FUN = sd)
climD[c(3,5)] <- climD[c(3,5)]+(climD[c(3,5)]*0.01)
climD[c(4,6)] <- climD[c(4,6)]+(climD[c(4,6)]*0.01)
climD[3] <- (climD[3] - climAvg[3])/climSD[3]
climD[4] <- (climD[4] - climAvg[4])/climSD[4]
climD[5] <- (climD[5] - climAvg[5])/climSD[5]
climD[6] <- (climD[6] - climAvg[6])/climSD[6]
#load vital rate parameters
pGrow <- readRDS("../vitalRateRegressions/truncNormModel/growthParamsMCMC.rds")
pGrow2 <- melt(pGrow)
pGrow2$Spp <- c(rep(rep(sppList, each=3000), times=13),
rep(rep(sppList, each=3000), times=1),
rep(rep(sppList, each=3000), times=6),
rep(rep(sppList, each=3000), times=13),
rep(rep(sppList, each=3000), times=6))
pGrow2$Coef <- c(rep("beta", times=3000*4*13),
rep("betaSpp", times=3000*4),
rep("gInt", times=6*4*3000),
rep("intYr", times=4*3000*13),
rep("intercept", times=3000*4),
rep("rain1", times=4*3000),
rep("rain2", times=4*3000),
rep("tau", times=4*3000),
rep("temp1", times=4*3000),
rep("temp2", times=4*3000))
colnames(pGrow2)[1] <- "Iter"
pGrow <- pGrow2[,c(1,3:5)]; rm(pGrow2)
pGrowAll <- subset(pGrow, Coef=="gInt"|Coef=="rain1"|Coef=="rain2"|Coef=="temp1"|Coef=="temp2"|Coef=="tau")
pGrowYrs <- subset(pGrow, Coef=="beta" | Coef=="intYr")
years <- unique(allD$year)[2:14]+1900
pGrowYrs$Year <- c(rep(rep(years, each=3000), each=4),
rep(rep(years, each=3000), each=4))
####
#### Vital rate functions -----------------------------------------------
####
growFunc <- function(pGrowAll, pGrowYrs, N, climate, simsPerYear, doYear, sppSim){
growNow <- subset(pGrowAll, Spp==sppSim)
doNow <- sample(x = c(1:3000), 1)
growNow <- subset(growNow, Iter==doNow)
growNowYr <- subset(pGrowYrs, Year==doYear)
growNowYr <- subset(growNowYr, Iter==doNow)
growNowYr <- subset(growNowYr, Spp==sppSim)
iID <- which(growNowYr$Coef=="intYr")
intercept <- growNowYr$value[iID]
sID <- which(growNowYr$Coef=="beta")
size <- growNowYr$value[sID]
cID <- which(growNow$Coef=="rain1"|growNow$Coef=="rain2"|growNow$Coef=="temp1"|growNow$Coef=="temp2")
climEffs <- growNow$value[cID]
tID <- which(growNow$Coef=="tau")
tau <- growNow$value[tID]
mu <- intercept+size*log(N)+sum(climEffs*climate)
newN <- rlnormTrunc(1, meanlog = mu, sdlog = (1/tau), min = 0, max = 1)
return(newN)
}
# growFunc <- function(pGrowAll, pGrowYrs, N, climate, simsPerYear, doYear, sppSim){
#   growNow <- subset(pGrowAll, Spp==sppSim)
#   growNowYr <- subset(pGrowYrs, Year==doYear)
#   growNowYr <- subset(growNowYr, Spp==sppSim)
#   iID <- which(growNowYr$Coef=="intYr")
#   intercept <- growNowYr$value[iID]
#   sID <- which(growNowYr$Coef=="beta")
#   size <- growNowYr$value[sID]
#   cID <- which(growNow$Coef=="rain1"|growNow$Coef=="rain2"|growNow$Coef=="temp1"|growNow$Coef=="temp2")
#   climEffs <- growNow$value[cID]
#   tID <- which(growNow$Coef=="tau")
#   tau <- growNow$value[tID]
#   mu <- intercept+size*log(N)+sum(climEffs*climate)
#   newN <- rlnormTrunc(1, meanlog = mu, sdlog = (1/tau), min = 0, max = 1)
# #   newN <- exp(newN)
#   return(newN)
# }
####
#### Run simulations -----------------------------------------------------
####
outD <- data.frame(variable=NA, cover=NA, sim=NA, species=NA)
length(sppList)
for(i in 1:1){
sppSim <- sppList[i]
nSim <- 10
yearsN <- 50
years <- unique(allD$year)+1900
yearsID <- unique(allD$year)
Nsave <- matrix(ncol=yearsN, nrow=nSim)
sppD <- subset(allD, Species==sppSim)
Nsave[,1] <- mean(subset(sppD, year==yearsID[1])$percCover)
for(yr in 2:yearsN){
for(sim in 1:nSim){
N <- Nsave[sim,yr-1]
climYr <- sample(climD$year,1)
climate <- subset(climD, year==climYr)[,c(3,5,4,6)]
doYear <- sample(years[2:length(years)], 1)
Nout <- growFunc(pGrow=pGrowAll, pGrowYrs=pGrowYrs, N=N, climate=climate, simsPerYear=length(NforG), doYear=doYear, sppSim=sppSim)
Nsave[sim,yr] <- Nout
print(paste("Simulation", sim, "of year", yr, "for", sppSim))
}#end sim loop
}#end year loop
dN <- as.data.frame(Nsave)
colnames(dN) <- seq(1:yearsN)
nM <- melt(dN)
nM$sim <- rep(1:nSim, length(yearsN))
nM$species <- rep(sppSim, nSim*length(yearsN))
colnames(nM)[2] <-  "cover"
outD <- rbind(outD, nM)
}
####
#### Output
####
outD <- outD[2:nrow(outD),]
outP <- ddply(outD, .(species, as.numeric(variable)), summarize,
coverAvg = median(cover),
up = quantile(cover, 0.875),
down = quantile(cover, 0.125))
colnames(outP)[2] <- "year"
plot(outP$year, outP$up*100, type="l", lty=2, ylim=c(0,max(outP$up*100)))
lines(outP$year, outP$coverAvg*100, type="l", lwd=2)
lines(outP$year, outP$down*100, type="l", lty=2)
mean(outP$coverAvg)
median(outP$coverAvg)
hist(outD$cover)
# ggplot(outD)+
#   geom_line(aes(x=variable, y=cover*100, group=sim), alpha=0.5)
#Quad-Based Model simulations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
# Set working directory to location of this source file #
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
#clear everything, just to be safe
rm(list=ls(all=TRUE))
library(reshape2)
library(plyr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(EnvStats)
#bring in data
allD <- read.csv("../../speciesData/quadAllCover.csv")
allD <- allD[,2:ncol(allD)] #get rid of X ID column
allD$percCover <- allD$totCover/10000
head(scale(allD$percCover, center=TRUE, scale=TRUE))
sppList <- as.character(unique(allD$Species))
#bring in climate data
climD <- read.csv("../../weather/Climate.csv")
climD[3:6] <- scale(climD[3:6], center = TRUE, scale = TRUE)
head(climD)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/survival")
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
# Set working directory to location of this source file #
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!#
#clear everything, just to be safe
rm(list=ls(all=TRUE))
sppList=c("ARTR","HECO","POSE","PSSP")
alpha.effect=c(0.004,0.048,0.040,0.017) # for spp in alphabetical order
spp=1
doSpp=sppList[spp]
outfile=paste("Surv_params_",doSpp,".csv",sep="")
growDfile=paste("../../speciesData/",doSpp,"/survD.csv",sep="")
growD=read.csv(growDfile)
#   growD$Group=as.factor(substr(growD$quad,1,1)) ##add Group information
D=growD  #subset(growD,allEdge==0)
D$logarea=log(D$area)
D$quad=as.character(D$quad)
D$year=as.factor(D$year)
# calculate crowding
for(i in 1:length(sppList)){
distDfile=paste("../../speciesData/",sppList[i],"/",sppList[i],"_genet_xy.csv",sep="")
if(i==1){
distD=read.csv(distDfile)
distD$nbSpp=sppList[i]
}else{
tmp=read.csv(distDfile)
tmp$nbSpp=sppList[i]
distD=rbind(distD,tmp)
}
}
distD=distD[,c("quad","year","trackID","area","nbSpp","x","y")]
W=matrix(NA,dim(D)[1],length(sppList))
for(i in 1:dim(D)[1]){
tmpD=subset(distD,year==D$year[i] & quad==D$quad[i])
focal=which(tmpD$trackID==D$trackID[i] & tmpD$nbSpp==doSpp)
xx=tmpD$x[focal] ; yy=tmpD$y[focal]
tmpD$distance=sqrt((xx-tmpD$x)^2+(yy-tmpD$y)^2)
tmpD=subset(tmpD,distance>0)
if(dim(tmpD)[1]>0){
for(k in 1:length(sppList)){
sppI=which(tmpD$nbSpp==sppList[k])
if(length(sppI)>0){
W[i,k]=sum(exp(-1*alpha.effect[k]*tmpD$distance[sppI]^2)*tmpD$area[sppI])
}else{
W[i,k]=0
}
}
}else{
W[i,]=0
}
}
crowd=W
#Set up data for JAGS
Nyears = length(unique(D$year))
Ngroups = length(unique(D$Group))
Nspp = length(sppList)
dataJ <- list(yr = as.numeric(as.factor(D$year)),
Nyears = Nyears,
grp = as.numeric(D$Group),
Ngroups = Ngroups,
Nspp = Nspp,
crowd = crowd,
x = log(D$area.t0),
y = log(D$area.t1),
Nobs = nrow(D))
params=c("intcpt.mu","intcpt.tau","intcpt.yr","intG",
"slope.mu","slope.tau","slope.yr",
"NBbeta.mu","NBbeta.tau","tauGroup",
"tau","tauSize")
inits=list(1)
inits[[1]]=list(
intcpt.mu=0,
intcpt.tau=1,
intcpt.yr=rep(0,Nyears),
Gbeta=rep(0,Ngroups),
slope.mu=0.5,
slope.tau=1,
slope.yr=rep(0,Nyears),
NBbeta.mu=rep(0,Nspp),
tauGroup=1,
NBbeta.tau=0.2
)
inits[[2]]=list(
intcpt.mu=1,
intcpt.tau=10,
intcpt.yr=rep(1,Nyears),
Gbeta=rep(1,Ngroups),
slope.mu=1,
slope.tau=10,
slope.yr=rep(1,Nyears),
NBbeta.mu=rep(1,Nspp),
tauGroup=1,
NBbeta.tau=0.3
)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
update(mod, n.iter = (iterations))
out <- coda.samples(mod, params, n.iter=iterations, n.thin=10)
library(rjags)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
update(mod, n.iter = (iterations))
dataJ <- list(yr = as.numeric(as.factor(D$year)),
Nyears = Nyears,
grp = as.numeric(D$Group),
Ngroups = Ngroups,
Nspp = Nspp,
crowd = crowd,
x = log(D$area.t0),
y = log(D$area.t1),
Nobs = nrow(D))
head(D)
dataJ <- list(yr = as.numeric(as.factor(D$year)),
Nyears = Nyears,
grp = as.numeric(D$Group),
Ngroups = Ngroups,
Nspp = Nspp,
crowd = crowd,
x = log(D$area),
y = D$survives,
Nobs = nrow(D))
params=c("intcpt.mu","intcpt.tau","intcpt.yr","intG",
"slope.mu","slope.tau","slope.yr",
"NBbeta.mu","NBbeta.tau","tauGroup",
"tau","tauSize")
inits=list(1)
inits[[1]]=list(
intcpt.mu=0,
intcpt.tau=1,
intcpt.yr=rep(0,Nyears),
Gbeta=rep(0,Ngroups),
slope.mu=0.5,
slope.tau=1,
slope.yr=rep(0,Nyears),
NBbeta.mu=rep(0,Nspp),
tauGroup=1,
NBbeta.tau=0.2
)
inits[[2]]=list(
intcpt.mu=1,
intcpt.tau=10,
intcpt.yr=rep(1,Nyears),
Gbeta=rep(1,Ngroups),
slope.mu=1,
slope.tau=10,
slope.yr=rep(1,Nyears),
NBbeta.mu=rep(1,Nspp),
tauGroup=1,
NBbeta.tau=0.3
)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
update(mod, n.iter = (iterations))
params=c("intcpt.mu","intcpt.tau","intcpt.yr","intG",
"slope.mu","slope.tau","slope.yr",
"NBbeta.mu","NBbeta.tau","tauGroup",
"tau","tauSize")
inits=list(1)
inits[[1]]=list(
intcpt.mu=0,
intcpt.tau=1,
intcpt.yr=rep(0,Nyears),
Gbeta=rep(0,Ngroups),
slope.mu=0.5,
slope.tau=1,
slope.yr=rep(0,Nyears),
NBbeta.mu=rep(0,Nspp),
tauGroup=1,
NBbeta.tau=0.2
)
inits[[2]]=list(
intcpt.mu=1,
intcpt.tau=10,
intcpt.yr=rep(1,Nyears),
Gbeta=rep(1,Ngroups),
slope.mu=1,
slope.tau=10,
slope.yr=rep(1,Nyears),
NBbeta.mu=rep(1,Nspp),
tauGroup=1,
NBbeta.tau=0.3
)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
update(mod, n.iter = (iterations))
params=c("intcpt.mu","intcpt.tau","intcpt.yr","intG",
"slope.mu","slope.tau","slope.yr",
"NBbeta.mu","NBbeta.tau","tauGroup",
"tau","tauSize")
inits=list(1)
inits[[1]]=list(
intcpt.mu=0,
intcpt.tau=1,
intcpt.yr=rep(0,Nyears),
Gbeta=rep(0,Ngroups),
slope.mu=0.5,
slope.tau=1,
slope.yr=rep(0,Nyears),
NBbeta.mu=rep(0,Nspp),
tauGroup=1,
NBbeta.tau=0.2
)
inits[[2]]=list(
intcpt.mu=1,
intcpt.tau=10,
intcpt.yr=rep(1,Nyears),
Gbeta=rep(1,Ngroups),
slope.mu=1,
slope.tau=10,
slope.yr=rep(1,Nyears),
NBbeta.mu=rep(1,Nspp),
tauGroup=1,
NBbeta.tau=0.3
)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
update(mod, n.iter = (iterations))
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
y = D$survives
y[33]
params=c("intcpt.mu","intcpt.tau","intcpt.yr","intG",
"slope.mu","slope.tau","slope.yr",
"NBbeta.mu","NBbeta.tau","tauGroup",
"tau","tauSize")
inits=list(1)
inits[[1]]=list(
intcpt.mu=0,
intcpt.tau=1,
intcpt.yr=rep(0,Nyears),
intG=rep(0,Ngroups),
slope.mu=0.5,
slope.tau=1,
slope.yr=rep(0,Nyears),
NBbeta.mu=rep(0,Nspp),
tauGroup=1,
NBbeta.tau=0.2
)
inits[[2]]=list(
intcpt.mu=1,
intcpt.tau=10,
intcpt.yr=rep(1,Nyears),
intG=rep(1,Ngroups),
slope.mu=1,
slope.tau=10,
slope.yr=rep(1,Nyears),
NBbeta.mu=rep(1,Nspp),
tauGroup=1,
NBbeta.tau=0.3
)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
iterations <- 500
adapt <- 200
mod <- jags.model("survival_JAGS.R", data=dataJ, n.chains=2, inits=inits, n.adapt=adapt)
update(mod, n.iter = (iterations))
out <- coda.samples(mod, params, n.iter=iterations, n.thin=10)
outStats <- summary(out)$stat
outStats
getwd()

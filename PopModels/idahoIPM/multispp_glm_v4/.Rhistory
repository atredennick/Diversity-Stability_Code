death.fire = 0.5
rec.fire = 0.5
death.intr = 0.005
rec.intr = 0.4
tree.start = 0.01
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0.4
S[1] = 0.1
G[1] = 0.2
Ft[1] = 0.3
tcF <- matrix(nrow=time, ncol=length(w.s))
tcS <- matrix(nrow=time, ncol=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.invasion(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
#   ,                         tree.start=tree.start)
tcS[,i] <- outs[,4]
#   +outs[,3]+outs[,4]
}
colnames(tcS) <- w.s
# colnames(tcF) <- w.s
library(reshape2)
library(ggplot2)
library(ggthemes)
tcMS <- melt(tcS)
# tcMF <- melt(tcF)
# harvest <-
tcD <- data.frame(Cover = tcMS$value,
Time = tcMS$Var1,
Harv = tcMS$Var2)
tcDm <- melt(tcD, id.vars=c("Time", "Harv"))
ggplot(data=tcDm, aes(value))+
geom_line(stat="density")+
#   geom_density(fill="grey", color="black", size=1, alpha=0.7)+
#   geom_histogram()+
#   geom_vline(aes(xintercept=0.8))+
facet_grid(Harv~variable,scales = "free_y")+
#   guides(color=FALSE)+
theme_few()+
theme(
strip.background = element_blank())
# strip.text.y = element_blank() ,
outs
for(i in 1:length(w.s)){
outs <- savanna.invasion(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
#   ,                         tree.start=tree.start)
tcS[,i] <- outs[,4]
#   +outs[,3]+outs[,4]
}
source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction_StepFireFxn.R")
w.s = seq(0,0.1,by=0.05)
# Parameter values for stable forest
a = 0.3
b = 0.1
mu = 0.15
v = 0.005
time=20000
death.fire = 0.5
rec.fire = 0.5
death.intr = 0.005
rec.intr = 0.4
tree.start = 0.01
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0.4
S[1] = 0.1
G[1] = 0.2
Ft[1] = 0.3
tcF <- matrix(nrow=time, ncol=length(w.s))
tcS <- matrix(nrow=time, ncol=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.model(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
#   ,                         tree.start=tree.start)
tcS[,i] <- outs[,4]
#   +outs[,3]+outs[,4]
}
colnames(tcS) <- w.s
# colnames(tcF) <- w.s
library(reshape2)
library(ggplot2)
library(ggthemes)
tcMS <- melt(tcS)
# tcMF <- melt(tcF)
# harvest <-
tcD <- data.frame(Cover = tcMS$value,
Time = tcMS$Var1,
Harv = tcMS$Var2)
tcDm <- melt(tcD, id.vars=c("Time", "Harv"))
ggplot(data=tcDm, aes(value))+
geom_line(stat="density")+
#   geom_density(fill="grey", color="black", size=1, alpha=0.7)+
#   geom_histogram()+
#   geom_vline(aes(xintercept=0.8))+
facet_grid(Harv~variable,scales = "free_y")+
#   guides(color=FALSE)+
theme_few()+
theme(
strip.background = element_blank())
##PLOT OF TREE COVER HISTORGRAMS
source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction_StepFireFxn.R")
w.s = seq(0,0.1,by=0.05)
# Parameter values for stable forest
a = 0.3
b = 0.1
mu = 0.15
v = 0.005
time=20000
death.fire = 0.5
rec.fire = 0.5
death.intr = 0.005
rec.intr = 0.4
tree.start = 0.01
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0.4
S[1] = 0.2
G[1] = 0.3
Ft[1] = 0.1
tcF <- matrix(nrow=time, ncol=length(w.s))
tcS <- matrix(nrow=time, ncol=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.model(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
#   ,                         tree.start=tree.start)
tcS[,i] <- outs[,4]
#   +outs[,3]+outs[,4]
}
colnames(tcS) <- w.s
# colnames(tcF) <- w.s
library(reshape2)
library(ggplot2)
library(ggthemes)
tcMS <- melt(tcS)
# tcMF <- melt(tcF)
# harvest <-
tcD <- data.frame(Cover = tcMS$value,
Time = tcMS$Var1,
Harv = tcMS$Var2)
tcDm <- melt(tcD, id.vars=c("Time", "Harv"))
ggplot(data=tcDm, aes(value))+
geom_line(stat="density")+
#   geom_density(fill="grey", color="black", size=1, alpha=0.7)+
#   geom_histogram()+
#   geom_vline(aes(xintercept=0.8))+
facet_grid(Harv~variable,scales = "free_y")+
#   guides(color=FALSE)+
theme_few()+
theme(
strip.background = element_blank())
# strip.text.y = element_blank() ,
matplot(time,outs)
matplot(c(1:time),outs)
matplot(c(1:time),outs, type="l")
##PLOT OF TREE COVER HISTORGRAMS
source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction_StepFireFxn.R")
w.s = seq(0,0.1,by=0.05)
# Parameter values for stable forest
a = 0.3
b = 0.1
mu = 0.15
v = 0.005
time=2000
death.fire = 0.5
rec.fire = 0.5
death.intr = 0.005
rec.intr = 0.4
tree.start = 0.01
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0.4
S[1] = 0.2
G[1] = 0.3
Ft[1] = 0.1
tcF <- matrix(nrow=time, ncol=length(w.s))
tcS <- matrix(nrow=time, ncol=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.model(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
#   ,                         tree.start=tree.start)
tcS[,i] <- outs[,4]
#   +outs[,3]+outs[,4]
}
matplot(c(1:time),outs, type="l")
source(http://r.research.att.com/benchmarks/R-benchmark-25.R)
source("http://r.research.att.com/benchmarks/R-benchmark-25.R")
####
#### PLOT RESULTS FROM VARYING-r SIMULATIONS
####
library(ggplot2)
cv <- read.csv("CV_rVary.csv")
sdr <- read.csv("rSD_rVary.csv")
pgrs <- read.csv("pgrs_rVary.csv")
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
####
#### PLOT RESULTS FROM VARYING-r SIMULATIONS
####
library(ggplot2)
cv <- read.csv("CV_rVary.csv")
sdr <- read.csv("rSD_rVary.csv")
pgrs <- read.csv("pgrs_rVary.csv")
pgrs
hist(pgrs)
hist(pgrs[,2:4])
hist(pgrs[,2])
plot(density(pgrs[,2]))
plot(density(pgrs[,2], adjust=5))
plot(density(pgrs[,2], adjust=5), col=1)
plot(density(pgrs[,2], adjust=5), col=1)
for(i in 3:5){
lines(density(pgrs[,i], adjust=5), col=i)
}
plot(density(pgrs[,2], adjust=5), col=1, size=3)
plot(density(pgrs[,2], adjust=5), col=1, lwd=3)
plot(density(pgrs[,2], adjust=5), col=1, lwd=3)
for(i in 3:5){
lines(density(pgrs[,i], adjust=5), col=i, lwd=3)
}
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
####
#### PLOT RESULTS FROM VARYING-r SIMULATIONS
####
library(ggplot2)
cv <- read.csv("CV_rVary.csv")
sdr <- read.csv("rSD_rVary.csv")
pgrs <- read.csv("pgrs_rVary.csv")
plot(density(pgrs[,2], adjust=5), col=1, lwd=3)
for(i in 3:5){
lines(density(pgrs[,i], adjust=5), col=i, lwd=3)
}
plotD <- as.data.frame(cbind(cv[,2], sdr[,2], apply(pgrs, MARGIN = 1, FUN = mean)))
####
#### PLOT RESULTS FROM VARYING-r SIMULATIONS
####
library(ggplot2)
cv <- read.csv("CV_rVary.csv")
sdr <- read.csv("rSD_rVary.csv")
pgrs <- read.csv("pgrs_rVary.csv")
plot(density(pgrs[,2], adjust=5), col=1, lwd=3)
for(i in 3:5){
lines(density(pgrs[,i], adjust=5), col=i, lwd=3)
}
tmpI <- which(pgrs<0, arr.ind = TRUE)[,1]
plotD <- as.data.frame(cbind(cv[,2], sdr[,2], apply(pgrs, MARGIN = 1, FUN = mean)))
colnames(plotD) <- c("cv", "sdr", "meanR")
ggplot(plotD[-tmpI,], aes(x=meanR, y=cv))+
geom_point(shape=19, size=3)+
geom_smooth(color="purple", size=1, fill="purple", method="loess")+
theme_bw()+
xlab("sd(r)")+
ylab(expression(CV[T]))
ggplot(plotD[-tmpI,], aes(x=sdr, y=cv))+
geom_point(shape=19, size=3)+
geom_smooth(color="purple", size=1, fill="purple", method="loess")+
theme_bw()+
xlab("sd(r)")+
ylab(expression(CV[T]))
head(pgrs)
head(plotD)
plotD
pgrs
plotD <- as.data.frame(cbind(cv[,2], sdr[,2], apply(pgrs[,2:5], MARGIN = 1, FUN = mean)))
colnames(plotD) <- c("cv", "sdr", "meanR")
ggplot(plotD[-tmpI,], aes(x=meanR, y=cv))+
geom_point(shape=19, size=3)+
geom_smooth(color="purple", size=1, fill="purple", method="loess")+
theme_bw()+
xlab("sd(r)")+
ylab(expression(CV[T]))
sims <- 500
spp <- 4
offs <- matrix(NA, ncol=spp, nrow=sims)
for(i in 1:100){
ttt <- rnorm(4,1,0.5)
offs[i,] <- ttt
}
write.csv(offs, "randomOffsets_r.csv", row.names=FALSE)
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
getwd()
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
tail(CV)
hist(CV)
sims <- 200
spp <- 4
offs <- matrix(NA, ncol=spp, nrow=sims)
for(i in 1:100){
ttt <- rnorm(4,1,0.5)
offs[i,] <- ttt
}
write.csv(offs, "randomOffsets_r.csv", row.names=FALSE)
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
hist(CV[1:100])
Rpars
source("./recruitment/import2ipm.r")
Rpars
Rpars$intcpt.yr-Rpars$intcpt.mu
Rpars$intcpt.mu*rScale
rScale
rSims
sims <- 200
spp <- 4
offs <- matrix(NA, ncol=spp, nrow=sims)
for(i in 1:sims){
ttt <- rnorm(4,1,0.5)
offs[i,] <- ttt
}
write.csv(offs, "randomOffsets_r.csv", row.names=FALSE)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
sppSD <- apply(X = covSave[(burn.in+1):tlimit,], MARGIN = 2, FUN=sd)
sppSD
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
rSims
rSims <- read.csv("randomOffsets_r.csv")
getwd()
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
sims <- 200
spp <- 4
offs <- matrix(NA, ncol=spp, nrow=sims)
for(i in 1:sims){
ttt <- rnorm(4,1,0.5)
offs[i,] <- ttt
}
write.csv(offs, "randomOffsets_r.csv", row.names=FALSE)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
# Multispecies, spatially implicit IPM
# This version makes it possible to assume "no overlap"
# for intraspecific competition only or intra- and interspecific competition
#This version allows you to "grow" each species in isolation, to obtain
#the species' intrinsic growth rate (r in Lotka-Volterra terms)
#We do this in a fixed environment where all year effects are set to zero
####
#### This version is a sensitivity analysis, chaning Gpars, Rpars, and Spars intercepts
####
# ATT 8/26/14
outfile1="ipm_cover_intrinsicGrowth.csv"
A=10000 #Area of 100cm x 100cm quadrat
tlimit=500 ## number of years to simulate
burn.in=250    # years to cut before calculations
sppList=c("ARTR","HECO","POSE","PSSP")
bigM=c(75,75,50,50)     #Set matrix dimension for each species
maxSize=c(3000,202,260,225)    # in cm^2: PSSP=225 HECO=202  POSE=260  ARTR=3000  # minSize=0.2  cm^2
Nyrs=22
doGroup=NA  # NA for spatial avg., values 1-6 for a specific group
constant=F  # constant environment
NoOverlap.Inter=T # no overlap of heterospecifics
compScale=F # not well implemented, but for rescaling competition coefficients
perturbPpt=F
rSims <- read.csv("randomOffsets_r.csv")
# Multispecies, spatially implicit IPM
# This version makes it possible to assume "no overlap"
# for intraspecific competition only or intra- and interspecific competition
#This version allows you to "grow" each species in isolation, to obtain
#the species' intrinsic growth rate (r in Lotka-Volterra terms)
#We do this in a fixed environment where all year effects are set to zero
####
#### This version is a sensitivity analysis, chaning Gpars, Rpars, and Spars intercepts
####
# ATT 8/26/14
outfile1="ipm_cover_intrinsicGrowth.csv"
A=10000 #Area of 100cm x 100cm quadrat
tlimit=500 ## number of years to simulate
burn.in=250    # years to cut before calculations
sppList=c("ARTR","HECO","POSE","PSSP")
bigM=c(75,75,50,50)     #Set matrix dimension for each species
maxSize=c(3000,202,260,225)    # in cm^2: PSSP=225 HECO=202  POSE=260  ARTR=3000  # minSize=0.2  cm^2
Nyrs=22
doGroup=NA  # NA for spatial avg., values 1-6 for a specific group
constant=F  # constant environment
NoOverlap.Inter=T # no overlap of heterospecifics
compScale=F # not well implemented, but for rescaling competition coefficients
perturbPpt=F
rSims <- read.csv("randomOffsets_r.csv")
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
# Multispecies, spatially implicit IPM
# This version makes it possible to assume "no overlap"
# for intraspecific competition only or intra- and interspecific competition
#This version allows you to "grow" each species in isolation, to obtain
#the species' intrinsic growth rate (r in Lotka-Volterra terms)
#We do this in a fixed environment where all year effects are set to zero
####
#### This version is a sensitivity analysis, chaning Gpars, Rpars, and Spars intercepts
####
# ATT 8/26/14
A=10000 #Area of 100cm x 100cm quadrat
tlimit=200 ## number of years to simulate
burn.in=100    # years to cut before calculations
sppList=c("ARTR","HECO","POSE","PSSP")
bigM=c(75,75,50,50)     #Set matrix dimension for each species
maxSize=c(3000,202,260,225)    # in cm^2: PSSP=225 HECO=202  POSE=260  ARTR=3000  # minSize=0.2  cm^2
Nyrs=22
doGroup=NA  # NA for spatial avg., values 1-6 for a specific group
constant=T  # constant environment
NoOverlap.Inter=T # no overlap of heterospecifics
compScale=F # not well implemented, but for rescaling competition coefficients
Nspp <- length(sppList)
rSims <- read.csv("randomOffsets_r.csv")
rSD <- numeric(nrow(rSims))
pgrS <- matrix(NA, ncol=length(sppList), nrow=nrow(rSims))
# Multispecies, spatially implicit IPM
# This version makes it possible to assume "no overlap"
# for intraspecific competition only or intra- and interspecific competition
#This version allows you to "grow" each species in isolation, to obtain
#the species' intrinsic growth rate (r in Lotka-Volterra terms)
#We do this in a fixed environment where all year effects are set to zero
####
#### This version is a sensitivity analysis, chaning Gpars, Rpars, and Spars intercepts
####
# ATT 8/26/14
A=10000 #Area of 100cm x 100cm quadrat
tlimit=200 ## number of years to simulate
burn.in=100    # years to cut before calculations
sppList=c("ARTR","HECO","POSE","PSSP")
bigM=c(75,75,50,50)     #Set matrix dimension for each species
maxSize=c(3000,202,260,225)    # in cm^2: PSSP=225 HECO=202  POSE=260  ARTR=3000  # minSize=0.2  cm^2
Nyrs=22
doGroup=NA  # NA for spatial avg., values 1-6 for a specific group
constant=F  # constant environment
NoOverlap.Inter=T # no overlap of heterospecifics
compScale=F # not well implemented, but for rescaling competition coefficients
Nspp <- length(sppList)
rSims <- read.csv("randomOffsets_r.csv")
rSD <- numeric(nrow(rSims))
pgrS <- matrix(NA, ncol=length(sppList), nrow=nrow(rSims))
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_rVary.R', echo=TRUE)
setwd("~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims")
source('~/Repos/Diversity_Stability/PopModels/idahoIPM/multispp_glm_v4/stabilitySims/ipm_noOverlap_monocultureGrowth_rVary.R', echo=TRUE)

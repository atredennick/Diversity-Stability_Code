library(ggthemes)
library(lme4)
y3D <- read.csv("Regrowth_2013.csv")
y3D <- subset(y3D, Site!="Tiorola") #remove Tiorola
#wet:dry ratios for 2013 (Lakamane not estimated); Tiendega from 2013 harvest subsamples
wdRatios <- data.frame(Site = c("Tiendega", "Lakamane"))
wdRatios$Ratio <- c(0.44, 0.5)
tmpD <- merge(y3D[,1:7], wdRatios, all.x=TRUE)
regrow2013_kg <- tmpD[,6]*tmpD[,8]
rm(y3D, wdRatios, tmpD)
##Bring in all data
allD <- read.csv("Regrowth_2011-2013.csv")
allD <- subset(allD, Site!="Tiorola")
tmp <- which(allD$Year.Harvested==2013)
allD[tmp, 6] <- regrow2013_kg
rm(tmp, regrow2013_kg)
#Rescale things
allD$rrg <- (allD$TOTAL.BIOMASS..kg.*1000)/allD$Initial.Biomass..g./(allD$Year.Harvested-2010)
allD$logrrg <- log(allD$rrg)
#add in f/h factors
fire <- c("y", "y", "n", "n")
herb <- c("y", "n", "y", "n")
allD$fire <- NA
allD$herb <- NA
for(i in 1:length(fire)){
tmp <- which(allD$Treatment==i)
allD[tmp,12] <- fire[i]
allD[tmp,13] <- herb[i]
}
allD
rm(list=ls(all=TRUE)) #clear everything, just to be safe
##TO DO:
# 1. Correct dead tree entries from 0 biomass to NA
# 2. Estimate mortality
# 3. Re-run analyses with correct samples (no dead trees)
#load some libraries
#if you need to install these packages, remove the '#' from the next line and run them
#install.packages(c("plyr", "ggplot2"))
library(plyr)
library(ggplot2)
library(ggthemes)
library(lme4)
y3D <- read.csv("Regrowth_2013.csv")
y3D <- subset(y3D, Site!="Tiorola") #remove Tiorola
#wet:dry ratios for 2013 (Lakamane not estimated); Tiendega from 2013 harvest subsamples
wdRatios <- data.frame(Site = c("Tiendega", "Lakamane"))
wdRatios$Ratio <- c(0.44, 0.5)
tmpD <- merge(y3D[,1:7], wdRatios, all.x=TRUE)
regrow2013_kg <- tmpD[,6]*tmpD[,8]
rm(y3D, wdRatios, tmpD)
##Bring in all data
allD <- read.csv("Regrowth_2011-2013.csv")
allD <- subset(allD, Site!="Tiorola")
tmp <- which(allD$Year.Harvested==2013)
allD[tmp, 6] <- regrow2013_kg
rm(tmp, regrow2013_kg)
#Rescale things
allD$rrg <- (allD$TOTAL.BIOMASS..kg.*1000)/allD$Initial.Biomass..g./(allD$Year.Harvested-2010)
allD$logrrg <- log(allD$rrg)
#add in f/h factors
fire <- c("y", "y", "n", "n")
herb <- c("y", "n", "y", "n")
allD$fire <- NA
allD$herb <- NA
for(i in 1:length(fire)){
tmp <- which(allD$Treatment==i)
allD[tmp,12] <- fire[i]
allD[tmp,13] <- herb[i]
}
head(allD)
y3D <- read.csv("Regrowth_2013.csv")
y3D <- subset(y3D, Site!="Tiorola") #remove Tiorola
y3D
#wet:dry ratios for 2013 (Lakamane not estimated); Tiendega from 2013 harvest subsamples
wdRatios <- data.frame(Site = c("Tiendega", "Lakamane"))
wdRatios$Ratio <- c(0.44, 0.5)
tmpD <- merge(y3D[,1:7], wdRatios, all.x=TRUE)
regrow2013_kg <- tmpD[,6]*tmpD[,8]
regrow2013_kg
rm(y3D, wdRatios, tmpD)
##Bring in all data
allD <- read.csv("Regrowth_2011-2013.csv")
allD <- subset(allD, Site!="Tiorola")
tmp <- which(allD$Year.Harvested==2013)
allD
allD[tmp, 6] <- regrow2013_kg
tail(allD)
#Rescale things
allD$rrg <- (allD$TOTAL.BIOMASS..kg.*1000)/allD$Initial.Biomass..g./(allD$Year.Harvested-2010)
allD$logrrg <- log(allD$rrg)
#add in f/h factors
fire <- c("y", "y", "n", "n")
herb <- c("y", "n", "y", "n")
allD$fire <- NA
allD$herb <- NA
head(allD)
for(i in 1:length(fire)){
tmp <- which(allD$Treatment==i)
allD[tmp,11] <- fire[i]
allD[tmp,12] <- herb[i]
}
head(allD)
write.csv(allD, "AllData_ForAnalysis_2011-2013.csv")
allD <- read.csv("AllData_ForAnalysis_2011-2013.csv", na.strings = "NA")
summary(allD)
allD
Tien1 <- length(which(is.na(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))==TRUE))
Tien1
Tien1 <- length(which(is.na(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))$TOTAL.BIOMASS..kg.==TRUE))
Tien1 <- length(which(is.na(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))[,7]==TRUE))
Tien1
Tien1 <- length(which(is.na(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))[,7]==TRUE))/nrow(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))
Tien1
Tien1 <- length(which(is.na(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))[,7]==TRUE))/nrow(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))
Tien2 <- length(which(is.na(subset(allD, Site=="Tiendega" & Year.Harvested=="2013"))[,7]==TRUE))/nrow(subset(allD, Site=="Tiendega" & Year.Harvested=="2013"))
Lak1 <- length(which(is.na(subset(allD, Site=="Lakamane" & Year.Harvested=="2011"))[,7]==TRUE))/nrow(subset(allD, Site=="Lakamane" & Year.Harvested=="2011"))
Lak2 <- length(which(is.na(subset(allD, Site=="Lakamane" & Year.Harvested=="2013"))[,7]==TRUE))/nrow(subset(allD, Site=="Lakamane" & Year.Harvested=="2013"))
Tien1*100
Tien2*100
Lak1*100
Lak2*100
View(allD)
2/38
TienTot <- length(which(is.na(subset(allD, Site=="Tiendega"))[,7]==TRUE))/nrow(subset(allD, Site=="Tiendega"))
LakTot <- length(which(is.na(subset(allD, Site=="Lakamane"))[,7]==TRUE))/nrow(subset(allD, Site=="Lakamane"))
Tien1*100
Tien2*100
Lak1*100
Lak2*100
TienTot*100
LakTot*100
100/2.5
nrow(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))
nrow(subset(allD, Site=="Tiendega" & Year.Harvested=="2013"))
nrow(subset(allD, Site=="Lakamane" & Year.Harvested=="2011"))
nrow(subset(allD, Site=="Lakamane" & Year.Harvested=="2013"))
length(which(is.na(subset(allD, Site=="Lakamane" & Year.Harvested=="2013"))[,7]==TRUE))
37+38
allDnoNA <- subset(allD, is.na(rrg)==FALSE)
##OK now start ANOVAs
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Tiendega" & Year.Harvested==2011)))
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Tiendega" & Year.Harvested==2013)))
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Lakamane" & Year.Harvested==2011)))
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Lakamane" & Year.Harvested==2013)))
all1 <- lmer(rrg ~ fire*herb + (1|Site), data=subset(allDnoNA, Year.Harvested==2011))
anova(all1)
library(lme4)
install.packages("lme4")
library(lme4)
all1 <- lmer(rrg ~ fire*herb + (1|Site), data=subset(allDnoNA, Year.Harvested==2011))
anova(all1)
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Tiendega" & Year.Harvested==2011)))
nrow(subset(allDnoNA, Site=="Tiendega" & Year.Harvested==2011))
subset(allDnoNA, Site=="Tiendega" & Year.Harvested==2011)
allD
nrow(subset(allD, Site=="Tiendega" & Year.Harvested=="2011"))
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Tiendega" & Year.Harvested==2013)))
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Lakamane" & Year.Harvested==2011)))
37+38
anova(lm(rrg~fire*herb, data=subset(allDnoNA, Site=="Lakamane" & Year.Harvested==2013)))
39+35
all1 <- lmer(rrg ~ fire*herb + (1|Site), data=subset(allDnoNA, Year.Harvested==2011))
anova(all1)
all2 <- lmer(rrg ~ fire*herb + (1|Site), data=subset(allDnoNA, Year.Harvested==2013))
anova(all2)
#Pooled treatment, site effects by year
mod1 <- aov(rrg~Site, data=subset(allDnoNA, Year.Harvested==2011))
anova(mod1)
TukeyHSD(mod1)
mod2 <- aov(rrg~Site, data=subset(allDnoNA, Year.Harvested==2013))
anova(mod2)
TukeyHSD(mod2)
mod1 <- aov(rrg~as.factor(Year.Harvested), data=subset(allDnoNA, Site=="Tiendega"))
anova(mod1)
TukeyHSD(mod1)
mod2 <- aov(rrg~as.factor(Year.Harvested), data=subset(allDnoNA, Site=="Lakamane"))
anova(mod2)
TukeyHSD(mod2)
ggplot(data=allD, aes(x=Site, y=rrg))+
geom_boxplot()+
ylab(expression(paste("Relative Regrowth Rate (g ", g^-1, " ", y^-1,")")))+
facet_grid(.~Year.Harvested)+
theme_bw()
477+15
setwd("~/Dropbox/idahoIPM/multispp_glm_v4")
# Multispecies, spatially implicit IPM
# This version makes it possible to assume "no overlap"
# for intraspecific competition only or intra- and interspecific competition
# ATT 8/26/14
outfile1="ipm_cover_T10.csv"
outfile2="stable_size.csv"
# obsClimateFile="Climate.csv"
perturbPpt=F
perturbTemp=F
# climYrSave=read.csv("climYears.csv")  # use same sequence of years used for observed run
# randYrSave=read.csv("randYears.csv")
A=10000 #Area of 100cm x 100cm quadrat
tlimit=1250 ## number of years to simulate
burn.in=250    # years to cut before calculations
sppList=c("ARTR","HECO","POSE","PSSP")
bigM=c(75,75,50,50)     #Set matrix dimension for each species
maxSize=c(3000,202,260,225)    # in cm^2: PSSP=225 HECO=202  POSE=260  ARTR=3000  # minSize=0.2  cm^2
Nyrs=22
doGroup=NA  # NA for spatial avg., values 1-6 for a specific group
constant=F
NoOverlap.Inter=T
compScale=F
#============================================================
# (I) LOAD VITAL RATE PARAMETERS & FUNCTIONS
#============================================================
Nspp=length(sppList)
# get climate data
# obsD=read.csv(obsClimateFile)
# climD=obsD[,2:NCOL(obsD)]  #drop year column
# climD$ppt1.TmeanSpr1=climD$ppt1*climD$TmeanSpr1
# climD$ppt2.TmeanSpr2=climD$ppt2*climD$TmeanSpr2
# climDmean=colMeans(climD); climDsd=apply(climD,MARGIN=2,FUN=sd)
# set up survival parameters and function
source("./survival/import2ipm_noOverlap.r")
# set up growth parameters and function
source("./growth/import2ipm_noOverlap.r")
# set up recruitment parameters and function
source("recruitment/import2ipm.r")
getwd()
infile=paste("../../speciesData/",sppList[i],"/recSize.csv",sep="")
recSize=read.csv(infile)
infile=paste("../speciesData/",sppList[i],"/recSize.csv",sep="")
recSize=read.csv(infile)
# Multispecies, spatially implicit IPM
# This version makes it possible to assume "no overlap"
# for intraspecific competition only or intra- and interspecific competition
# ATT 8/26/14
outfile1="ipm_cover_T10.csv"
outfile2="stable_size.csv"
# obsClimateFile="Climate.csv"
perturbPpt=F
perturbTemp=F
# climYrSave=read.csv("climYears.csv")  # use same sequence of years used for observed run
# randYrSave=read.csv("randYears.csv")
A=10000 #Area of 100cm x 100cm quadrat
tlimit=1250 ## number of years to simulate
burn.in=250    # years to cut before calculations
sppList=c("ARTR","HECO","POSE","PSSP")
bigM=c(75,75,50,50)     #Set matrix dimension for each species
maxSize=c(3000,202,260,225)    # in cm^2: PSSP=225 HECO=202  POSE=260  ARTR=3000  # minSize=0.2  cm^2
Nyrs=22
doGroup=NA  # NA for spatial avg., values 1-6 for a specific group
constant=F
NoOverlap.Inter=T
compScale=F
#============================================================
# (I) LOAD VITAL RATE PARAMETERS & FUNCTIONS
#============================================================
Nspp=length(sppList)
# get climate data
# obsD=read.csv(obsClimateFile)
# climD=obsD[,2:NCOL(obsD)]  #drop year column
# climD$ppt1.TmeanSpr1=climD$ppt1*climD$TmeanSpr1
# climD$ppt2.TmeanSpr2=climD$ppt2*climD$TmeanSpr2
# climDmean=colMeans(climD); climDsd=apply(climD,MARGIN=2,FUN=sd)
# set up survival parameters and function
source("./survival/import2ipm_noOverlap.r")
# set up growth parameters and function
source("./growth/import2ipm_noOverlap.r")
# set up recruitment parameters and function
source("recruitment/import2ipm.r")
Rpars
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
install.packages("msm")
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
install.packages("statmod")
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
source("./recruitment/import2ipm.r")
Gpars
cv
plot((burn.in+1):tlimit, 100*totalCov, lwd=2, col="black")
plot((burn.in+1):tlimit, 100*totalCov, lwd=2, col="black", type="l")
plot((burn.in+1):tlimit, 100*totalCov, lwd=2, col="black", type="l")
lim <- 100
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(totalCov, 22, replace = FALSE)
tmpCov <- totalCov[tmp]
cvVec[i] <- (sd(tmpCov)^2)/mean(tmpCov)
}
plot(density(cvVec))
cvVec
tmpCov
tmp
#get average cv over similar timespan as observations (22 random years)
lim <- 100
cvVec <- numeric(lim)
for(i in 1:lim){
tmpCov <- sample(totalCov, 22, replace = FALSE)
cvVec[i] <- (sd(tmpCov)^2)/mean(tmpCov)
}
plot(density(cvVec, na.rm = TRUE))
#get average cv over similar timespan as observations (22 random years)
lim <- 1000
cvVec <- numeric(lim)
for(i in 1:lim){
tmpCov <- sample(totalCov, 22, replace = FALSE)
cvVec[i] <- (sd(tmpCov)^2)/mean(tmpCov)
}
plot(density(cvVec, na.rm = TRUE))
#get average cv over similar timespan as observations (22 random years)
lim <- 1000
cvVec <- numeric(lim)
for(i in 1:lim){
tmpCov <- sample(totalCov, 22, replace = FALSE)
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, na.rm = TRUE))
plot(density(cvVec))
#get average cv over similar timespan as observations (22 random years)
lim <- 10000
cvVec <- numeric(lim)
for(i in 1:lim){
tmpCov <- sample(totalCov, 22, replace = FALSE)
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec), lwd=3)
plot(density(cvVec, adjust=4), lwd=3)
plot(density(cvVec, adjust=2), lwd=3)
plot(density(cvVec, adjust=4), lwd=3)
plot(density(cvVec, adjust=4), lwd=3, main="", xlab="community CV")
tmp <- sample(c(1:length(totalCov)-22), 1)
tmp2 <- c(tmp:tmp+21)
tmp2
tmp
tmp <- sample(c(1:length(totalCov)-22), 1)
tmp
c(1:length(totalCov)-22)
c(1:(length(totalCov)-22))
seq(1,(length(totalCov)-22))
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
#get average cv over similar timespan as observations (22 random years)
lim <- 1000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=3, main="", xlab="community CV")
#get average cv over similar timespan as observations (22 random years)
lim <- 10000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=3, main="", xlab="community CV")
plot(density(cvVec, adjust=4), lwd=3, main="", xlab="community CV", col="purple")
abline(v = mean(cvVec), lty=2)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community CV", col="purple")
abline(v = mean(cvVec), lty=2)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community CV", col="purple")
abline(v = mean(cvVec), lty=2)
abline(v = median(cvVec), lty=3, col="coral")
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community CV", col="purple")
abline(v = mean(cvVec), lty=2, lwd=3)
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community CV", col="dodgerblue")
abline(v = mean(cvVec), lty=2, lwd=3)
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
plot(density(cvVec, adjust=4), lwd=4, main=mean(cvVec), xlab="community CV", col="dodgerblue")
plot(density(cvVec, adjust=4), lwd=4, main=round(mean(cvVec),2), xlab="community CV", col="dodgerblue")
abline(v = mean(cvVec), lty=2, lwd=3)
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
plot(density(cvVec, adjust=4), lwd=4, main=round(mean(cvVec),2), xlab="community CV", col="dodgerblue")
abline(v = mean(cvVec), lty=2, lwd=3, "grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
plot(density(cvVec, adjust=4), lwd=4, main=round(mean(cvVec),2), xlab="community CV", col="dodgerblue")
abline(v = mean(cvVec), lty=2, lwd=3, "grey75")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
plot(density(cvVec, adjust=4), lwd=4, main=round(mean(cvVec),2), xlab="community CV", col="dodgerblue")
abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=4)
abline(v=0.2, lwd=3, lty=4)
plot(density(cvVec, adjust=4), lwd=4, main=round(mean(cvVec),2), xlab="community CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=4)
plot(density(cvVec, adjust=4), lwd=4, main=round(mean(cvVec),2), xlab="community CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
#get average cv over similar timespan as observations (22 random years)
lim <- 1000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
#get average cv over similar timespan as observations (22 random years)
lim <- 1000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
#get average cv over similar timespan as observations (22 random years)
lim <- 1000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
#get average cv over similar timespan as observations (22 random years)
lim <- 10000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
#get average cv over similar timespan as observations (22 random years)
lim <- 10000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
#get average cv over similar timespan as observations (22 random years)
lim <- 10000
cvVec <- numeric(lim)
for(i in 1:lim){
tmp <- sample(seq(1,(length(totalCov)-22)), 1)
tmp2 <- seq(tmp,tmp+21)
tmpCov <- totalCov[tmp2]
cvVec[i] <- (sd(tmpCov))/mean(tmpCov)
}
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="purple")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="steelblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
par(mfrow=c(1,1),tcl=-0.2,mgp=c(2,0.5,0))
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
par(mfrow=c(1,1),tcl=-0.2,mgp=c(2,0.5,0))
plot(density(cvVec, adjust=4), lwd=4, main="", xlab="community temporal CV", col="dodgerblue",
ylab="estimated probability density")
# abline(v = mean(cvVec), lty=2, lwd=3, col="grey25")
abline(v = median(cvVec), lty=3, col="coral", lwd=3)
abline(v=0.2, lwd=3, lty=1)
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
Gpars
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
Gpars
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
source('~/Dropbox/idahoIPM/multispp_glm_v4/ipm_noOverlap.r', echo=TRUE)
